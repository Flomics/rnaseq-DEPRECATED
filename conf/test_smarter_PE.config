/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running the rnaseq pipeline with samples with the SMARTer library preparation kit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run nf-core/rnaseq -profile smarter

----------------------------------------------------------------------------------------
*/

params {
    // Input options
    input = 's3://flomics-data/test_data_RNAseq_pipeline/Flomics_rnaseq_test_PE_SMARTER_samplesheet.csv'
    outdir = 's3://flomics-scratch/nextflow-workdir/test/test_smarter_PE/'
    project = 'github_actions'

    // Genome references
    fasta              = 's3://flomics-no-backup/references/Genomes/Homo_sapiens/GENCODE/GRCh38/release-105/Homo_sapiens.GRCh38.dna_sm_v105_SIRV-set3.fa'
    gtf                = 's3://flomics-no-backup/references/Genomes/Homo_sapiens/GENCODE/GRCh38/release-105/gencode.v39.annotation_tRNA_SIRV-set3.sorted.gtf'
    star_index         = 's3://flomics-no-backup/references/Genomes/Homo_sapiens/GENCODE/GRCh38/release-105/STARindex_v2.7.10a/'

    // Other parameters
    kraken2_db              = 's3://flomics-no-backup/references/Genomes/KrakenDB/k2_minusb_20230314.tar.gz'
    aligner                 = 'star_salmon'
    gencode                 = true
    min_trimmed_reads       = 100
    skip_deseq2_qc          = true
    with_umi                = true
    umitools_extract_method = 'regex'
    umitools_bc_pattern2    = '^(?P<umi_1>.{8})(?P<discard_1>.{6}).*'
    salmon_quant_libtype    =  'ISR'
}

process {
    scratch = true
    cpus   = { 1 * task.attempt }
    memory = { 1.GB * task.attempt}
    time   = {10.m  * task.attempt}

    // Use exit code conditions carefully in closures fed to errorStrategy. AWS Batch often sends back empty error codes when it kills jobs in case of time or memory exceeded, for example.
    // If a process uses a lot of memory, reduce maxRetries to a maximum of 1 in a withName selector for the corresponding process, to avoid huge bills.
    errorStrategy = 'retry'
    maxRetries    = 5
    maxErrors     = '-1'

    //This changes the requirements for specific processes


    withName : ".*:BAM_STATS_SAMTOOLS:.*" {
        memory = { 500.MB * task.attempt }
        time   = { 10.m   * task.attempt }
        cpus   = { 2 }
    }
    withName : ".*:SAMTOOLS_INDEX" {
        memory = { 200.MB * task.attempt }
        time   = { 10.m   * task.attempt }
        cpus   = { 2 }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN" {
        cpus   = { 12  }
        time = {30.h * task.attempt}
        memory = { 42.GB }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT" {
        cpus   = { 6  }
        time = {50.m * task.attempt}
        memory = { 6.GB * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:BEDGRAPH_TO_BIGWIG_.*" {
        cpus   = { 1  }
        time = {10.m * task.attempt}
        memory = { 200.MB * task.attempt}
    }
    withName : "NFCORE_RNASEQ:RNASEQ:BEDTOOLS_GENOMECOV" {
        cpus   = { 2  }
        time = {1.h * task.attempt}
        memory = { 10.GB * task.attempt}
    }
    withName : "NFCORE_RNASEQ:RNASEQ:CUSTOM_DUMPSOFTWAREVERSIONS" {
        cpus   = { 1  }
        time = {5.m * task.attempt}
        memory = { 1.GB }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:DEDUP_UMI_UMITOOLS_GENOME:UMITOOLS_DEDUP"{
        cpus   = { 1 }
        memory = { 2.GB * task.attempt }
        time   = { 2.h   * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:DEDUP_UMI_UMITOOLS_TRANSCRIPTOME:UMITOOLS_DEDUP"{
        cpus   = { 1 }
        memory = { 2.GB }
        time   = { 6.h * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:DESEQ2_QC_STAR_SALMON"{
        cpus   = { 2 }
        memory = { 3.GB * task.attempt }
        time   = { 50.m   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:DUPRADAR"{
        cpus   = { 2 }
        memory = { 500.MB * task.attempt }
        time   = { 10.m   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:FASTQC_UMITOOLS_TRIMGALORE:FASTQC"{
        cpus   = { 3 }
        memory = { 1.GB * task.attempt }
        time   = { 50.m   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE"{
        cpus   = { 15 }
        memory = { 4.GB }
        time   = {4.h   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:FASTQC_UMITOOLS_TRIMGALORE:UMITOOLS_EXTRACT"{
        cpus   = { 1 }
        memory = { 800.MB * task.attempt }
        time   = { 8.h   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:FLOMICS_QC:FLOMICS_QC_AGGREGATOR"{
        cpus   = { 1 }
        memory = { 200.MB * task.attempt }
        time   = { 30.m   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:FLOMICS_QC:FLOMICS_QC_CALCULATE_.*"{
        cpus   = { 1 }
        memory = { 1.GB * task.attempt }
        time   = { 10.m   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:FLOMICS_QC:FLOMICS_QC_PARSER"{
        cpus   = { 1 }
        memory = { 200.MB * task.attempt }
        time   = { 10.m   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:FLOMICS_QC:FLOMICS_QC_SPLICED_READS"{
        cpus   = { 1 }
        memory = { 6.GB * task.attempt }
        time   = { 1.h   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:FLOMICS_QC:FLOMICS_TRACKHUBS"{
        cpus   = { 1 }
        memory = { 400.MB * task.attempt }
        time   = { 40.m   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:FLOMICS_UMI_DEDUP_QC:FLOMICS_QC_CALCULATE_UMI_DEDUP_RATE"{
        cpus   = { 1 }
        memory = { 400.MB * task.attempt }
        time   = { 30.m   * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:FLOMICS_QC:FLOMICS_QC_CALCULATE_INSERT_SIZE"{
        cpus   = { 1 }
        memory = { 500.MB * task.attempt }
        time   = { 2.h   * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:INPUT_CHECK:SAMPLESHEET_CHECK"{
        cpus   = { 1 }
        memory = { 100.MB * task.attempt }
        time   = { 10.m   * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES"{
        cpus   = { 1 }
        memory = { 10.GB * task.attempt }
        time   = { 20.m   * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:MULTIQC"{
        cpus   = { 1 }
        memory = { 4.GB * task.attempt }
        time   = { 60.m   * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:MULTIQC_CUSTOM_BIOTYPE"{
        cpus   = { 1 }
        memory = { 300.MB * task.attempt }
        time   = { 10.m   * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:MULTIQC_TSV_STRAND_CHECK"{
        cpus   = { 1 }
        memory = { 100.MB * task.attempt }
        time   = { 10.m   * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:CUSTOM_GETCHROMSIZES"{
        cpus   = { 1 }
        memory = { 200.MB * task.attempt }
        time   = { 10.m   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:GTF2BED" {
        time   = { 10.m   * task.attempt }
        cpus   = { 1 }
        memory = { 4.GB * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:GTF_GENE_FILTER" {
        time   = { 10.m   * task.attempt }
        cpus   = { 1 }
        memory = { 3.GB * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:MAKE_TRANSCRIPTS_FASTA" {
        time   = { 10.m   * task.attempt }
        cpus   = { 1 }
        memory = { 3.GB * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:PRESEQ_LCEXTRAP" {
        time   = { 30.m   * task.attempt }
        cpus   = { 1 }
        memory = { 3.GB * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:QUALIMAP_RNASEQ" {
        time   = { 2.h   * task.attempt }
        cpus   = { 1 }
        memory = { 6.GB * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SALMON_QUANT" {
        time   = { 10.m   * task.attempt }
        cpus   = { 1 }
        memory = { 3.GB * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SALMON_SE_.*" {
        time   = { 10.m   * task.attempt }
        cpus   = { 1 }
        memory = { 1.GB * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SALMON_TX2GENE" {
        time   = { 30.m   * task.attempt }
        cpus   = { 1 }
        memory = { 10.GB * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SALMON_TXIMPORT" {
        time   = { 30.m   * task.attempt }
        cpus   = { 1 }
        memory = { 1.GB * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_BAMSTAT" {
        time   = { 30.m   * task.attempt }
        cpus   = { 1 }
        memory = { 200.MB * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_INFEREXPERIMENT" {
        time   = { 40.m   * task.attempt }
        cpus   = { 1 }
        memory = { 400.MB * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_INNERDISTANCE" {
        time   = { 10.m   * task.attempt }
        cpus   = { 1 }
        memory = { 1.GB * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_JUNCTION.*" {
        time   = { 40.m   * task.attempt }
        cpus   = { 1 }
        memory = { 400.MB * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_READDISTRIBUTION" {
        time   = { 10.m   * task.attempt }
        cpus   = { 1 }
        memory = { 1200.MB * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:SAMTOOLS_SORT" {
        time   = { 2.h   * task.attempt }
        cpus   = { 5 }
        memory = { 3.GB * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:STRINGTIE_STRINGTIE" {
        time   = { 20.m   * task.attempt }
        cpus   = { 1 }
        memory = { 1.GB * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:SUBREAD_FEATURECOUNTS" {
        time   = { 20.m   * task.attempt }
        cpus   = { 1 }
        memory = { 500.MB * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:UMITOOLS_PREPAREFORRSEM" {
        time   = { 10.m   * task.attempt }
        cpus   = { 1 }
        memory = { 200.MB * task.attempt }
    }

    //This next section adds necessary parameters to the processes
    withName : "NFCORE_RNASEQ:RNASEQ:FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE" {
        ext.args   = '--fastqc -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC -a2 AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT --stringency 20 --length 20'

                //-a and -a2 are the adapter sequences
                //--stringency 20 is the minimum overlap with adapter sequence required to trim a sequence. Recommended by Lexogen
                //--length 20 Removes reads smaller than this. Default and recommended by Lexogen
                // Lexogen recommends to use -n 2, to remove the adapter a maximum amount of 2 times for each read. This option is not available in trim_galore but it should not be necessary
    }

    withName: "NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN" {
        ext.args   =  '--readFilesCommand zcat --twopassMode Basic --outSAMprimaryFlag AllBestScore --outFilterMismatchNmax 999 --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 --outFilterType BySJout --alignSJDBoverhangMin 3 --alignSJoverhangMin 8 --peOverlapNbasesMin 40 --peOverlapMMp 0.8 --quantMode TranscriptomeSAM --outSAMunmapped Within --quantTranscriptomeBan Singleend'

		//--twopassMode Basic
		//     It reduces the number of intergenic reads and increases the number of spliced reads in cfRNA without increasing the spliced reads in DNA.

                // --outFilterMismatchNoverReadLmax
                //     kept at default value, however ENCODE recommends a value of 0.04:
                //     max number of mismatches per pair relative to read length: for 2x100b, max number of mis-matches is 0.04*200=8 for the paired read

                // --outFilterScoreMinOverLread 0.66 --outFilterMatchNminOverLread 0.66
                //     default values. When reduced, there is an increase in mapping, but it reduces heavily the quality of the mapped reads. In cfRNA from external sources
		//     the exonic percentage goes from 40-50% to 10-20% and the % of novel splicing junctions increase by 5-10%.

                // --outFilterMismatchNoverLmax 0.3
                //     Left at default. 0.6 is the recommended by Lexogen, but in our samples we see the exact same results.

                // --outSAMmultNmax -1
                //     limits the number of output alignments (SAM lines) for multimappers. Left at default since this does not change the output.

                // --outFilterMultimapNmax 20
                //     Alignments (all of them) will be output only if the read maps to no more loci than this value.
                //     Otherwise no alignments will be output, and the read will be counted as 'mapped to too many loci' in the Log.final.out.
		//     Tried increasing this to 1000 and reducing the --outSAMmultNmax to 10, but the results are the same than the default and we left the default (20).

                // --outFilterType BySJout
                //     Reduces the number of "spurious" junctions

                // --alignSJoverhangMin 8
                //     ENCODE-recommended setting

                // --alignSJDBoverhangMin 3
                //     Default, do not reduce to 1 (as recommended in ENCODE settings).
                //     A priori, a high value should reduce the number of false SJs improperly mapped to annotated splices.
                //     (We've seen that with genomic DNA being falsely spliced for this reason)

                // Lexogen support recommends --peOverlapNbasesMin 40  --peOverlapMMp 0.8: "sometimes when the inserts are short, the resulting overlapping Read1 and Read2 cause problems during the alignment. Though STAR is supposed to handle these cases with the standard settings, unfortunately it is not true (v2.5.1). So, we empirically found a set of values for those arguments that generate the desired alignments."
    }

    withName: "NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SALMON_QUANT" {
            ext.args = '--useEM --noErrorModel'
    }

    withName: "NFCORE_RNASEQ:RNASEQ:FASTQC_UMITOOLS_TRIMGALORE:UMITOOLS_EXTRACT" {
           ext.args   = '--extract-method=regex --bc-pattern2="^(?P<umi_1>.{8})(?P<discard_1>.{6}).*" '
    }

}
