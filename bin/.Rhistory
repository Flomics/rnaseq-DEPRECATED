sample_vector <- final_table$key
coverage1x_vector <- rep("coverage_1X", nrow(final_table))
coverage1x <- cbind(coverage1x_vector, sample_vector, coverage_total[,1])
colnames(coverage1x) <- c("group", "key", "value")
coverage10x_vector <- rep("coverage_10X", nrow(final_table))
coverage10x <- cbind(coverage10x_vector, sample_vector, coverage_total[,2])
colnames(coverage10x) <- c("group", "key", "value")
coverage100x_vector <- rep("coverage_100X", nrow(final_table))
coverage100x <- cbind(coverage100x_vector, sample_vector, coverage_total[,3])
colnames(coverage100x) <- c("group", "key", "value")
snps_file <- "/home/ctuni/Flomics/sarscov2/02-17-2022-17:56:13/1-Report.General/all_run_snps.csv"
snps_total <- read.csv(snps_file, header=F, sep=",")
colnames(snps_total) <- c("Sample", "Total number of SNPs")
snps_total <- snps_total[order(snps_total$Sample),]
snps_total <- data.frame("Total number of SNPS"=snps_total[,2])
snps_vector <- rep("total_number_of_snps", nrow(final_table))
snps <- cbind(snps_vector, sample_vector, snps_total)
colnames(snps) <- c("group", "key", "value")
snps$value <- as.character(snps$value)
file_name <- "run_info.json"
total_table_json <- rbind(final_table, coverage1x, coverage10x, coverage100x, snps)
total_table_json
json_string <- toJSON(setNames(as.data.frame(total_table_json),c("group","key","value")))
json_string
class(json_string)
writeLines(json_string, file_name)
?embed_file
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(OpenImageR)
library(kableExtra)
library(ggplot2)
library(stringr)
library(jsonlite)
# mutations_B.1.1.7 = c("D3L", "Q27*", "R52I", "DEL69/70", "Y73C", "DEL144", "S235F", "N501Y", "A570D", "P681H", "T716I", "S982A", "T1001I", "D1118H", "A1708D", "I2230T", "DEL3675/3677", "D614G","R203K","G204R","P314L")
mutations_B.1.1.7 = c("D3L", "Q27*", "R52I", "DEL69/70", "Y73C", "DEL144", "S235F", "N501Y", "A570D", "P681H", "T716I", "S982A", "T1001I", "D1118H", "A1708D", "I2230T", "DEL3675/3677", "D614G","R203K","G204R","P314L")
knitr::opts_chunk$set(echo = TRUE)
library(epivizrChart)
library(Homo.sapiens)
class(Homo.sapiens)
update.packages(ask = FALSE)
library(knitr)
library(kableExtra)
library(ggplot2)
library(stringr)
.rs.restartR()
library(knitr)
library(kableExtra)
library(ggplot2)
library(stringr)
library(jsonlite)
library(htmlwidgets)
library(plotly)
library(DT)
library(ggsci)
library(qiime2R)
library(tidyverse)
library(heatmaply)
rel_table_3 <- "/home/ctuni/Downloads/rel-table-3.tsv"
rel_table<- read.delim(rel_table_3, header = F, sep="\t", stringsAsFactors = FALSE)
rownames(rel_table)<-NULL
colnames(rel_table) <- rel_table[2,]
rel_table <- rel_table[-1,]
rel_table <- rel_table[-1,]
sample_text <- "ileum_A"
keep <- c("#OTU ID", sample_text)
rel_table <- rel_table[,names(rel_table) %in% keep]
sample_name <- rep(sample_text, nrow(rel_table))
rel_table<- cbind(rel_table, sample_name)
colnames(rel_table)<-c("OTU_ID", "Relative_frequency" , "Sample")
i=0
for (i in 1:nrow(rel_table)) { #nolint
if (rel_table[i,]$Relative_frequency=="0.0") {
rel_table[i,]$Relative_frequency <- NA
}
}
rel_table$Relative_frequency<-as.numeric(rel_table$Relative_frequency)
i=0
for (i in 1:nrow(rel_table)) { #nolint
if (substrRight(rel_table[i,]$OTU_ID, 1) == ";"){
rel_table[i,]$OTU_ID <- paste(rel_table[i,]$OTU_ID, "Unclassified", sep = "")
}
}
rel_table_filtered <- rel_table[complete.cases(rel_table),]
if (nrow(rel_table_filtered)>50) {
rel_table_ordered <- rel_table_filtered[order(-rel_table_filtered$Relative_frequency),]
rel_table_ordered$OTU_ID[50:nrow(rel_table_ordered)] <- "Other"
rel_table_filtered <- rel_table_ordered
}
rel_table_filtered
colnames(rel_table_filtered) <- c("Class", "Relative_frequency" , "Sample")
m <- list(l = 50, r = 50, b = 100, t = 100, pad = 4)
rel_table_filtered$Class <- gsub("[kpcofgs]__", "", rel_table_filtered$Class)
py$rel_table_filtered <- rel_table_filtered
reticulate::repl_python()
# install SciPy
conda_install("r-reticulate", "plotly=5.11.0")
plotly <- import("plotly")
reticulate::repl_python()
# create a new environment
conda_create("r-reticulate")
# install plotly
conda_install("r-reticulate", "plotly=5.11.0")
plotly <- import("plotly=5.11.0")
plotly <- import("plotly==5.11.0")
plotly <- import("plotly")
plotly
reticulate::repl_python()
py_install("plotly")
reticulate::repl_python()
plotly <- import("plotly")
reticulate::repl_python()
# create a new environment
conda_create("plot")
# install plotly
conda_install("plot", "plotly=5.11.0")
reticulate::repl_python()
write.csv(rel_table_filtered)
write.csv(rel_table_filtered, "rel_table_filtered.csv")
?write.csv
write.csv(rel_table_filtered, file="rel_table_filtered.csv")
rel_table_3 <- "/home/ctuni/Downloads/rel-table-3.tsv"
rel_table<- read.delim(rel_table_3, header = F, sep="\t", stringsAsFactors = FALSE)
rownames(rel_table)<-NULL
colnames(rel_table) <- rel_table[2,]
rel_table <- rel_table[-1,]
rel_table <- rel_table[-1,]
colnames(rel_table) <- gsub('[X]', '', colnames(rel_table))
sample_text <- "ileum_A"
keep <- c("#OTU ID", sample_text)
rel_table <- rel_table[,names(rel_table) %in% keep]
sample_name <- rep(sample_text, nrow(rel_table))
rel_table<- cbind(rel_table, sample_name)
colnames(rel_table)<-c("OTU_ID", "Relative_frequency" , "Sample")
i=0
for (i in 1:nrow(rel_table)) { #nolint
if (rel_table[i,]$Relative_frequency=="0.0") {
rel_table[i,]$Relative_frequency <- NA
}
}
rel_table$Relative_frequency<-as.numeric(rel_table$Relative_frequency)
i=0
for (i in 1:nrow(rel_table)) { #nolint
if (substrRight(rel_table[i,]$OTU_ID, 1) == ";"){
rel_table[i,]$OTU_ID <- paste(rel_table[i,]$OTU_ID, "Unclassified", sep = "")
}
}
rel_table_filtered <- rel_table[complete.cases(rel_table),]
if (nrow(rel_table_filtered)>50) {
rel_table_ordered <- rel_table_filtered[order(-rel_table_filtered$Relative_frequency),]
rel_table_ordered$OTU_ID[50:nrow(rel_table_ordered)] <- "Other"
rel_table_filtered <- rel_table_ordered
}
colnames(rel_table_filtered) <- c("Class", "Relative_frequency" , "Sample")
rel_table_filtered$Class <- gsub("[kpcofgs]__", "", rel_table_filtered$Class)
write.csv(rel_table_filtered, file="rel_table_filtered.csv")
write.table(rel_table_filtered, file="rel_table_filtered.csv", sep=",")
setwd(/home/ctuni/)
setwd("/home/ctuni/")
write.table(rel_table_filtered, file="rel_table_filtered.csv", sep=",")
200+1*nrow(table(rel_table_filtered$Class))
?kable_styling
?column_spec
rm(plotly)
library(plotly)
fig <- plot_ly(rel_table_filtered, y = ~Sample, x= ~Relative_frequency, color = ~Class, orientation = "h") %>%
layout( barmode = 'stack', xaxis = list(title = ''), yaxis = list(title = '%'), autosize = F, legend = list(entrywidthmode = "fraction", entrywidth = 0.9), hoverinfo = 'all', hoverlabel = list(namelength=-1) )
fig
fig <- plot_ly(rel_table_filtered, trace = "bar", y = ~Sample, x= ~Relative_frequency, color = ~Class, orientation = "h") %>%
layout( barmode = 'stack', xaxis = list(title = ''), yaxis = list(title = '%'), autosize = F, legend = list(entrywidthmode = "fraction", entrywidth = 0.9), hoverinfo = 'all', hoverlabel = list(namelength=-1) )
fig
fig <- plot_ly(rel_table_filtered, type = "bar", y = ~Sample, x= ~Relative_frequency, color = ~Class, orientation = "h") %>%
layout( barmode = 'stack', xaxis = list(title = ''), yaxis = list(title = '%'), autosize = F, legend = list(entrywidthmode = "fraction", entrywidth = 0.9), hoverinfo = 'all', hoverlabel = list(namelength=-1) )
fig
fig <- plot_ly(rel_table_filtered, type = "bar", y = ~Sample, x= ~Relative_frequency, color = ~Class, orientation = "h") %>%
layout( barmode = 'stack', xaxis = list(title = ''), yaxis = list(title = '%'), autosize = F, legend = list(entrywidthmode = "fraction", entrywidth = 0.9), hoverlabel = list(namelength=-1) )
fig
fig <- plot_ly(rel_table_filtered, type = "bar", y = ~Sample, x= ~Relative_frequency, color = ~Class, orientation = "h") %>%
layout( barmode = 'stack', xaxis = list(title = ''), yaxis = list(title = '%'), autosize = T, legend = list(entrywidthmode = "fraction", entrywidth = 0.9), hoverlabel = list(namelength=-1) )
fig
head(rel_table_filtered)
packages <-
c("tidyverse",
"lubridate",
"rjson",
"ggplot2",
"ggmap",
"wesanderson")
install.packages(setdiff(packages, rownames(installed.packages())))
data_x <-
"/home/ctuni/Downloads/cris/Location History/Records.json"
data_y <-
"/home/ctuni/Downloads/carla/Historial de ubicaciones/Records.json"
extract_maps_data <- function(fileName, saveAs) {
rd <- fromJSON(file = fileName)
records_data <- unlist(rd, recursive = FALSE)
save(records_data, file = saveAs)
records_data
}
if (file.exists("extracted_data_x.RData")) {
records_data_x <- get(load("extracted_data_x.RData"))
} else {
records_data_x <- extract_maps_data(fileName = data_x,
saveAs = "extracted_data_x.RData")
}
data_x <-
"/home/ctuni/Downloads/cris/Location History/Records.json"
if (file.exists("extracted_data_x.RData")) {
records_data_x <- get(load("extracted_data_x.RData"))
} else {
records_data_x <- extract_maps_data(fileName = data_x,
saveAs = "extracted_data_x.RData")
}
data_y <-
"/home/ctuni/Downloads/carla/Historial_de_ubicaciones/Records.json"
extract_maps_data <- function(fileName, saveAs) {
rd <- fromJSON(file = fileName)
records_data <- unlist(rd, recursive = FALSE)
save(records_data, file = saveAs)
records_data
}
if (file.exists("extracted_data_x.RData")) {
records_data_x <- get(load("extracted_data_x.RData"))
} else {
records_data_x <- extract_maps_data(fileName = data_x,
saveAs = "extracted_data_x.RData")
}
records_data_x <- extract_maps_data(fileName = data_x,
saveAs = "extracted_data_x.RData")
rd <- fromJSON(file = data_x)
?fromJSON
extract_maps_data <- function(fileName, saveAs) {
rd <- fromJSON(txt = fileName)
records_data <- unlist(rd, recursive = FALSE)
save(records_data, file = saveAs)
records_data
}
if (file.exists("extracted_data_x.RData")) {
records_data_x <- get(load("extracted_data_x.RData"))
} else {
records_data_x <- extract_maps_data(fileName = data_x,
saveAs = "extracted_data_x.RData")
}
rd <- fromJSON(txt = data_x)
rd <- fromJSON(file = data_x)
rd <- fromJSON(data_x)
rd <- fromJSON(file = data_x, method = "C", unexpected.escape = "error" )
detach("package:jsonlite", unload = TRUE)
library(tidyverse)
library(lubridate)
library(rjson)
library(ggplot2)
library(ggmap)
library(wesanderson)
if (file.exists("extracted_data_x.RData")) {
records_data_x <- get(load("extracted_data_x.RData"))
} else {
records_data_x <- extract_maps_data(fileName = data_x,
saveAs = "extracted_data_x.RData")
}
extract_maps_data <- function(fileName, saveAs) {
rd <- fromJSON(file = fileName)
records_data <- unlist(rd, recursive = FALSE)
save(records_data, file = saveAs)
records_data
}
if (file.exists("extracted_data_x.RData")) {
records_data_x <- get(load("extracted_data_x.RData"))
} else {
records_data_x <- extract_maps_data(fileName = data_x,
saveAs = "extracted_data_x.RData")
}
rd <- fromJSON(file = data_x)
data_x <-
"/home/ctuni/Downloads/cris/Location_History/Records.json"
data_y <-
"/home/ctuni/Downloads/carla/Historial_de_ubicaciones/Records.json"
if (file.exists("extracted_data_x.RData")) {
records_data_x <- get(load("extracted_data_x.RData"))
} else {
records_data_x <- extract_maps_data(fileName = data_x,
saveAs = "extracted_data_x.RData")
}
if (file.exists("extracted_data_y.RData")) {
records_data_y <- get(load("extracted_data_y.RData"))
} else {
records_data_y <- extract_maps_data(fileName = data_y,
saveAs = "extracted_data_y.RData")
}
gc()
library(jsonlite)
library(JBrowseR)
?json_config
JBrowseROutput("browserOutput")
assembly <- assembly("https://jbrowse.org/genomes/sars-cov2/fasta/sars-cov2.fa.gz", bgzip = TRUE)
annotations_track <- track_feature(
"https://jbrowse.org/genomes/sars-cov2/sars-cov2-annotations.sorted.gff.gz",
assembly
)
variants_url <- "https://flomics-genome-browser.s3.eu-west-1.amazonaws.com/sout_african_strain_R.pass.vcf.gz"
tracks <- tracks(annotations_track, variants_tracks)
variants_tracks <- track_variant(variants_url, assembly)
tracks <- tracks(annotations_track, variants_tracks)
theme <- json_config("config.json")
theme <- json_config("/home/ctuni/.nextflow/assets/Flomics/SARSCoV2-ww/docs/config.json")
theme <- json_config("/home/ctuni/.nextflow/assets/Flomics/SARSCoV2-ww/docs/config_jbrowser.json")
JBrowseR(
"View",
assembly = assembly,
# pass our tracks here
tracks = tracks,
theme = theme
)
knitr::opts_chunk$set(echo = TRUE)
theme("#311b92")
theme <- theme("#311b92", "#0097a7", "#f57c00", "#d50000")
JBrowseR(
"View",
assembly = assembly,
# pass our tracks here
tracks = tracks,
theme = theme
)
json_config("/home/ctuni/.nextflow/assets/Flomics/SARSCoV2-ww/docs/config_jbrowser.json")
theme("#311b92", "#0097a7", "#f57c00")
json_config("/home/ctuni/.nextflow/assets/Flomics/SARSCoV2-ww/docs/config_jbrowser.json")
json_config("/home/ctuni/.nextflow/assets/Flomics/SARSCoV2-ww/docs/config_jbrowser.json")
json_config("/home/ctuni/.nextflow/assets/Flomics/SARSCoV2-ww/docs/config_jbrowser.json")
theme <- json_config("/home/ctuni/.nextflow/assets/Flomics/SARSCoV2-ww/docs/config_jbrowser.json")
JBrowseR(
"View",
assembly = assembly,
# pass our tracks here
tracks = tracks,
theme = theme
)
?JBrowseR
#theme <- json_config("/home/ctuni/.nextflow/assets/Flomics/SARSCoV2-ww/docs/config_jbrowser.json")
custom_theme <- "{ \"palette\": { \"primary\": { \"main\": \"#311b92\" }, \"secondary\": { \"main\": \"#0097a7\" }, \"tertiary\": { \"main\": \"#f57c00\" }, \"quaternary\": { \"main\": \"#d50000\" }}}"
?json_config
?JBrowseR
config <- json_config("./config.json")
config <- json_config("/home/ctuni/.nextflow/assets/Flomics/SARSCoV2-ww/docs/config_jbrowser.json")
config <- json_config("/home/ctuni/.nextflow/assets/Flomics/SARSCoV2-ww/docs/config_jbrowser.json")
config <- json_config("/home/ctuni/.nextflow/assets/Flomics/SARSCoV2-ww/docs/config_jbrowser.json")
config
config <- json_config("/home/ctuni/config.json")
config <- json_config("/home/ctuni/.nextflow/assets/Flomics/SARSCoV2-ww/docs/config_jbrowser.json")
config
config <- json_config("/home/ctuni/config.json")
#variants_url <- paste("https://flomics-genome-browser.s3.eu-west-1.amazonaws.com/", request_id, "/", sample, ".pass.vcf.gz", sep="")
variants_url <- "https://flomics-genome-browser.s3.eu-west-1.amazonaws.com/sout_african_strain_R.pass.vcf.gz"
variants_tracks <- track_variant(variants_url, assembly)
#variants_url <- paste("https://flomics-genome-browser.s3.eu-west-1.amazonaws.com/", request_id, "/", sample, ".pass.vcf.gz", sep="")
variants_url <- "https://flomics-genome-browser.s3.eu-west-1.amazonaws.com/south_african_strain_R.pass.vcf.gz"
config
config <- json_config("/home/ctuni/config.json")
config
?track_wiggle
install.packages("rtracklayer")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rtracklayer")
library(rtracklayer)
wiggle_url <- "https://flomics-genome-browser.s3.eu-west-1.amazonaws.com/b82ef037/coverage_across_reference.wig"
wiggle_tracks <- track_wiggle(wigToBigWig(wiggle_url, seqinfo,
dest = paste(file_path_sans_ext(wiggle_url, TRUE), "bw", sep = "."),
clip = FALSE), assembly)
wiggle_tracks <- track_wiggle(wigToBigWig(wiggle_url, seqinfo,
dest = "/home/ctuni/test.bg",
clip = FALSE), assembly)
wiggle_tracks <- track_wiggle(wigToBigWig(wiggle_url, NULL,
dest = "/home/ctuni/test.bg",
clip = FALSE), assembly)
wiggle_tracks <- track_wiggle(wigToBigWig(wiggle_url,
dest = "/home/ctuni/test.bg",
clip = FALSE), assembly)
wiggle_tracks <- track_wiggle(wigToBigWig(wiggle_url, seqinfo = NULL,
dest = "/home/ctuni/test.bg",
clip = FALSE), assembly)
?wigToBigWig
?registered_UCSC_genomes
registered_UCSC_genomes()
Seqinfo(genome="wuhCor1")
wiggle_tracks <- track_wiggle(wigToBigWig(wiggle_url, Seqinfo(genome="wuhCor1"),
dest = "/home/ctuni/test.bg",
clip = FALSE), assembly)
wiggle_tracks <- track_wiggle(wigToBigWig("/home/ctuni/Downloads/coverage_across_reference.wig", Seqinfo(genome="wuhCor1"),
dest = "/home/ctuni/test.bg",
clip = FALSE), assembly)
wiggle_tracks <- track_wiggle(wigToBigWig("/home/ctuni/Downloads/coverage_across_reference.wig", Seqinfo(genome="wuhCor1"),
dest = "/home/ctuni/test.bg",
clip = FALSE), assembly)
wiggle_tracks <- track_wiggle(wigToBigWig("/home/ctuni/Downloads/coverage_across_reference.wig", Seqinfo(genome="wuhCor1"),
dest = "/home/ctuni/test.bg",
clip = FALSE), assembly)
wiggle_tracks <- track_wiggle(wigToBigWig("/home/ctuni/Downloads/coverage_across_reference.wig", Seqinfo(genome="wuhCor1"),
dest = "/home/ctuni/test.bg",
clip = FALSE), assembly)
wiggle_tracks <- track_wiggle(wigToBigWig("/home/ctuni/Downloads/coverage_across_reference.wig", Seqinfo(genome="wuhCor1"),
dest = "/home/ctuni/test.bg",
clip = FALSE), assembly)
getChromInfoFromNCBI()
registered_NCBI_genomes()
registered_NCBI_assemblies()
wiggle_tracks <- track_wiggle(wigToBigWig("/home/ctuni/Downloads/coverage_across_reference.wig", Seqinfo(genome="ASM994855v1"),
dest = "/home/ctuni/test.bg",
clip = FALSE), assembly)
Seqinfo(genome="ASM994855v1")
seq_object <- Seqinfo(genome="ASM994855v1")
wiggle_tracks <- track_wiggle(wigToBigWig("/home/ctuni/Downloads/coverage_across_reference.wig", seq_object ,
dest = "/home/ctuni/test.bg",
clip = FALSE), assembly)
wiggle_url <- "https://flomics-genome-browser.s3.eu-west-1.amazonaws.com/b82ef037/south_african_strain_R.bw"
wiggle_tracks <- track_wiggle(wiggle_url, assembly)
tracks <- tracks(annotations_track, variants_tracks, wiggle_tracks)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(EDASeq)
library(dplyr)
library(DT)
query <- GDCquery(
project = "TCGA-COAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
experimental.strategy = "RNA-Seq",
legacy = FALSE,
sample.type = c("Primary Tumor", "Solid Tissue Normal")
)
datatable(
getResults(query),
filter = 'top',
options = list(scrollX = TRUE, keys = TRUE, pageLength = 5),
rownames = FALSE
)
GDCdownload(
query = query,
method = "api",
files.per.chunk = 10
)
data <- GDCprepare(query = query)
03CRCmatrix <- assay(data,"unstranded")
CRCmatrix <- assay(data,"unstranded")
gc()
library(TCGAbiolinks)
?GDCprepare
?GDCquery
library(TCGAbiolinks)
library(SummarizedExperiment)
library(EDASeq)
library(dplyr)
library(DT)
TCGAbiolinks:::getProjectSummary("TCGA-COAD")
sumary <- TCGAbiolinks:::getProjectSummary("TCGA-COAD")
sumary$data_categories
datatable(
getResults(query),
filter = 'top',
options = list(scrollX = TRUE, keys = TRUE, pageLength = 5),
rownames = FALSE
)
query <- GDCquery(
project = "TCGA-COAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
experimental.strategy = "RNA-Seq",
legacy = FALSE,
sample.type = c("Primary Tumor", "Solid Tissue Normal")
)
datatable(
getResults(query),
filter = 'top',
options = list(scrollX = TRUE, keys = TRUE, pageLength = 5),
rownames = FALSE
)
sessionInfo()
remove.packages(TCGAbiolinks)
remove.package(TCGAbiolinks)
detach("package:TCGAbiolinks", unload = TRUE)
remove.packages("TCGAbiolinks", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
remove.packages("TCGAbiolinksGUI.data", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
BiocManager::install("BioinformaticsFMRP/TCGAbiolinksGUI.data")
BiocManager::install("ExperimentHub")
BiocManager::install("BioinformaticsFMRP/TCGAbiolinks")
library(TCGAbiolinks)
data <- GDCprepare(query = query)
gc()
View(data)
rm(data)
gc()
gc()
install.packages("languageserver")
install.packages("languageserver")
# load featurecounts results
featurecounts <- read.delim("/home/ctuni/Downloads/10K_CRC014.biotype_counts.tsv") #change this in pipeline with the path to bin
?read.delim
# load featurecounts results
featurecounts <- read.delim("/home/ctuni/Downloads/10K_CRC014.biotype_counts.tsv", sep = c(" ", "\t")) #change this in pipeline with the path to bin
featurecounts
# load featurecounts results
featurecounts <- read.table(text = gsub(" ", "\t", readLines("/home/ctuni/Downloads/10K_CRC014.biotype_counts.tsv"))) #change this in pipeline with the path to bin
featurecounts
# load featurecounts results
featurecounts <- read.table(text = gsub(" ", "\t", readLines("/home/ctuni/Downloads/10K_CRC014.biotype_counts.tsv")), col.names = TRUE) #change this in pipeline with the path to bin
# load featurecounts results
featurecounts <- read.table(text = gsub(" ", "\t", readLines("/home/ctuni/Downloads/10K_CRC014.biotype_counts.tsv"))) #change this in pipeline with the path to bin
colnames(featurecounts) <- featurecounts[,1]
colnames(featurecounts) <- featurecounts[1,]
featurecounts
featurecounts <- featurecounts[-1,]
featurecounts
setwd("/home/ctuni/.nextflow/assets/Flomics/rnaseq/bin/")
